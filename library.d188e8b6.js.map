{"mappings":"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","sources":["src/js/fetch-films-main.js","src/js/queue-list.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '2994e3a31c3cad99fd99bf3fe61d916f';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nimport Pagination from './pagination.js';\nimport API from './api-service.js';\nimport { addCurrrentMoviesToLocalStorage } from './local-storage';\nimport { preloaderShow, preloaderShowLonger, hidePreloader } from './loader';\n// import { renderFilmList } from './create-markup';\nimport refs from './refs'\n\n// const refs = {\n//   containerBox: document.querySelector(`.main-container--card__box`),\n//   containerCard: document.querySelector(`.main-container--card`),\n// };\n\nconst containerBox = document.querySelector(`.main-container--card__box`);\nconst inputEl = document.querySelector('.header_input');\n\nconst apiService = new API;\nconst pagination = new Pagination;\n\ngetPopularMovie();\n\n\n\n\n\n// Фун-ия, которая берет и передает данные по апи, имеет первый! параметр page = false. После параметра page можете передавать свои.\nfunction getPopularMovie(page = false) {\n  preloaderShowLonger();\n  const queryPage = page ? page : 1; // Проверка страниц, обязательно до fetch\n  apiService.setPageNumber = queryPage; // Передает текущую страницу в класс api\n\n\n\n  apiService.fetchPopularMovie().then(data => {\n    pagination.setCurrentPage = queryPage; // Передает страницу в пагинатор\n    pagination.setTotalPages = data.total_pages; // Передает общее кол-во страниц в пагинатор\n    pagination.setCallback = getPopularMovie; // Передает ссылку на коллбэк функцию\n    pagination.renderPagination(); // Вызов пагинации\n    addCurrrentMoviesToLocalStorage(data.results);\n    renderFilmList(data.results);\n  });\n}\n\nconst searchFilms = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  renderFilmList(response.data.results);\n  addCurrrentMoviesToLocalStorage(response.data.results);\n  return response.data;\n};\n\nsearchFilms();\n\nconst addGenresToLocalStorage = async () => {\n  const genres = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`\n  );\n  localStorage.setItem('GENRES', JSON.stringify(genres.data.genres));\n};\n\naddGenresToLocalStorage();\n\n\n\n\n// function renderFilmList (films){\n//   const markup = films.map(film => {\n//       return `\n//         <li class=\"main-container--card\">\n//             <img\n//             class=\"film-poster\"\n//             src=\"${\n//               film.poster_path === null\n//                 ? './no_image.jpg'\n//                 : `https://image.tmdb.org/t/p/w500${film.poster_path}`\n//             }\" \n//                 alt=\"${film.original_title}\"\n//                 loading=\"lazy\" data-id=\"${film.id}\">\n//             <p class=\"film-info\">\n//             <h2 class=\"film-title\" data-id=\"${\n//               film.id\n//             }\">${film.original_title.toUpperCase()}</h2>\n//             <p class=\"more-info\"> ${transformId(\n//               film.genre_ids\n//             )} | ${film.release_date.slice(0, 4)}</p>\n//             </p>\n//         </li>\n//       `;\n//     })\n//     .join('');\n//   refs.containerBox.innerHTML = markup;\n// }\n\n\n// =============================================================================================================================\n\n\n// import refs from \"./refs\";\n// import { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\n\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n\n\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n  refs.containerBox.innerHTML = '';\n\n    const markup = films\n      .map((film) => {\n            let date = film.release_date ?? film.first_air_date ?? null;\n            date = (date !== null) ? date.slice(0, 4) : '';\n                        \n            return `\n            <li class=\"main-container--card\"\n        data-modal-open>\n        <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"${film.poster_path ? `${IMG_URL}${film.poster_path}` : \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}\"\n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date} </p>\n         </div>\n    </li>`;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    if (films === []) {\n    return\n  };\n    const filmCards = films\n      .map((film) => {\n        let date = film.release_date ?? film.first_air_date ?? null;\n        date = (date !== null) ? date.slice(0, 4) : '';\n                    \n        return `\n        <li class=\"main-container--card\"\n    data-modal-open>\n    <img class=\"card-poster\"\n    data-id=\"${film.id}\" \n    src=\"${film.poster_path ? `${IMG_URL}${film.poster_path}` : \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}\"\n    alt=\"${film.original_name}\" loading=\"lazy\">\n    <div class=\"card-wrap\">\n    <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase()}</h2>\n    <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date}<span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n     </div>\n</li>`;\n    }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n};\n\nexport {renderMoviesCard};\n////////<span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span>\n\nfunction transformId([...arr]) {\n  const g = localStorage.getItem('GENRES');\n  const genres = JSON.parse(g);\n  let genreName;\n  const array = [...arr];\n  for (let i = 0; i < genres.length; i++) {\n    for (let x = 0; x < array.length; x++) {\n      if (array[x] === genres[i].id) {\n        genreName = genres[i].name;\n        array[x] = genreName;\n      }\n    }\n  }\n  // console.log(array)\n\n  if (array.length > 2) {\n    return `${array[0]}, ${array[1]}, Other`;\n  } else if (array.length === 1) {\n        return `${array[0]}`\n  }\n  else if (array.length === 0) {\n    return `No genre`;\n  }\n  return `${array[0]}, ${array[1]}`;\n}\n\n\n// import refs from \"./refs\";\n// import { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\n\n\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\";\n\n\n\n\n// ///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\n// function renderFilmList(films) {\n//     const markup = films\n//         .map((film) => {\n//         console.log(film)\n//             return `\n//             <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${film.poster_path === null ? './no_image.jpg'\n//               : `${IMG_URL}${film.poster_path}`\n//           }\"\n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} </p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n// refs.containerBox.innerHTML = markup;\n// }\n\n// export {renderFilmList};\n\n// ///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\n// function renderMoviesCard(films) {\n//     const filmCards = films\n//     .map((film) => {\n//         return `\n//         <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${IMG_URL}${film.poster_path}\" \n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n// };\n\n// export {renderMoviesCard};\n\n\n// ///////////// --функція для створення списку жанрів----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let x = 0; x < array.length; x++) {\n//             if (array[x] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[x] = genreName\n//             };\n//         };\n//     };\n//      if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     }\n//     return `${array[0]}, ${array[1]}`\n// };\n","import Pagination from './pagination.js';\nimport { renderMoviesCard } from \"./fetch-films-main.js\"\nimport { preloaderShowLonger } from './loader';\n\n\n\nconst pagination = new Pagination;\n\nconst refs = {\n    watched: document.querySelector('.header_btn-watched'),\n    queue: document.querySelector('.header_btn-queue'),\n    containerMovie: document.querySelector('.main-container--card__box'),\n    emptyPage: document.querySelector('.empty_page'),\n    paginationPage: document.querySelector('#section__pagination'),\n};\n\nconst getMovieStorage = localStorage.getItem('QUEUE_LIST');\nconst totalMovieElements = JSON.parse(getMovieStorage);\nconst countElpage = 10;\nlet totalMoviePages = 0;\n\n\nrefs.queue.addEventListener('click', onQueueClick);\n\nif (totalMovieElements.length === 0) {\n  refs.emptyPage.classList.add('visible');\n  refs.paginationPage.style.display = \"none\";\n} \n\n\n\nfunction onQueueClick(e) {\n    e.preventDefault();\n  refs.containerMovie.innerHTML = '';\n  refs.queue.classList.add('current-btn');\n  refs.watched.classList.remove('current-btn');\n    refs.queue.classList.remove('simple-btn');\n    refs.watched.classList.add('simple-btn');\n    \n  if (totalMovieElements.length !== 0) {\n    try {\n        paginationLibrary()\n       \n        refs.emptyPage.classList.remove('visible');\n\n    } catch (e) {\n      console.log(e);\n    }\n  } else { \n    refs.emptyPage.classList.add('visible');\n    refs.paginationPage.style.display = \"none\";\n    \n    return;\n  }\n}\n\n\nfunction paginationLibrary(page = false) { \n  preloaderShowLonger();\n  const queryPage = page ? page : 1; \n  const partMovie = [];\n\n  \n    for (let i = 1; i <= Math.ceil(totalMovieElements.length / countElpage); i += 1) { \n        let end = (countElpage * i);\n        let start = i > 1 ? (countElpage * (i - 1)) : 0;\n        if ((countElpage * i) > totalMovieElements.length) { \n          end = totalMovieElements.length;\n        }\n\n        partMovie[i] = (totalMovieElements.slice(start, end))\n    }\n    \n    totalMoviePages = partMovie.length - 1;\n      refs.containerMovie.innerHTML = \"\";\n    renderMoviesCard(partMovie[queryPage]);\n    \n  if (totalMoviePages > 1) { \n    pagination.setCurrentPage = queryPage;\n    pagination.setTotalPages = totalMoviePages; \n      pagination.setCallback = paginationLibrary; \n      \n    pagination.renderPagination(); \n      \n  }\n  \n}\n"],"names":["$bpxeT","parcelRequire","$35001c1ba8f51596$var$API_KEY","$35001c1ba8f51596$var$IMG_URL","$35001c1ba8f51596$var$apiService","document","querySelector","$1h2Gi","default","$35001c1ba8f51596$var$pagination","$jcFG7","$35001c1ba8f51596$var$getPopularMovie","page","arguments","length","$kvC6y","preloaderShowLonger","queryPage","setPageNumber","fetchPopularMovie","then","data","setCurrentPage","setTotalPages","total_pages","setCallback","renderPagination","$4LMMA","addCurrrentMoviesToLocalStorage","results","$35001c1ba8f51596$export$f2275db3dee9e567","$35001c1ba8f51596$var$searchFilms","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","get","concat","_ctx","sent","$35001c1ba8f51596$var$addGenresToLocalStorage","genres","localStorage","setItem","JSON","stringify","films","$4Nugj","containerBox","innerHTML","markup","map","film","_release_date","ref","date","release_date","first_air_date","slice","id","poster_path","original_name","original_title","toUpperCase","title","$35001c1ba8f51596$var$transformId","genre_ids","join","$35001c1ba8f51596$export$f48ccfcd8b08d9f9","filmCards","vote_average","toFixed","moviesContainer","insertAdjacentHTML","param","genreName","arr","$q7ZX2","g","getItem","parse","array","$8nrFW","i","x","name","$9313be0973dbaa58$var$pagination","$9313be0973dbaa58$var$refs","watched","queue","containerMovie","emptyPage","paginationPage","$9313be0973dbaa58$var$getMovieStorage","$9313be0973dbaa58$var$totalMovieElements","$9313be0973dbaa58$var$countElpage","$9313be0973dbaa58$var$totalMoviePages","$9313be0973dbaa58$var$paginationLibrary","partMovie","Math","ceil","end","start","$4y7rq","renderMoviesCard","addEventListener","e","preventDefault","classList","add","remove","style","display","e1","console","log"],"version":3,"file":"library.d188e8b6.js.map"}