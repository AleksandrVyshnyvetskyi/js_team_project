{"mappings":"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","sources":["src/js/search-by-keyword.js","src/js/create-markup.js"],"sourcesContent":["import {  renderFilmList} from \"./create-markup\";\nimport { preloaderShow, preloaderShowLonger, hidePreloader } from './loader';\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\nimport Pagination from './pagination.js';\nimport API from './api-service.js';\nimport refs from './refs';\n\n/////////////////винесено в refs\n// const refs = {\n//     searchForm: document.querySelector('.header_input-wrap'),\n//     inputEl: document.querySelector('.header_input'),\n//     moviesContainer: document.querySelector('.main-container--card__box'),\n//     errorText: document.querySelector('.header_error-msg'),\n// };\n\nconst apiService = new API;\nconst pagination = new Pagination;\n\n///////винесено в api-service\n// let searchQuery = '';\n\n// const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n// const KEY = `2994e3a31c3cad99fd99bf3fe61d916f`;\n\n// async function fetchSearchMovie(searchQuery) {\n//     return await axios.get(`${BASE_URL}?api_key=${KEY}&language=en-US&query=${searchQuery}`)\n//         .then(response => response.data);\n// }\n///////////\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nfunction onSearch(event) {\n    \n    event.preventDefault();\n    apiService.inputQuery = event.currentTarget.elements.query.value.trim();\n\n    if (refs.inputEl.value === \"\") {\n         return refs.errorText.classList.remove('is-hidden');\n    }\n    \n    // console.log(searchQuery);\n    refs.errorText.classList.add('is-hidden');\n   \n    getSearchMovie();\n    preloaderShow();\n    refs.inputEl.value = \"\";\n}\n\nasync function getSearchMovie(page = false) {\n    \n    const queryPage = page ? page : 1; // Проверка страниц, обязательно до fetch\n    apiService.setPageNumber = queryPage; // Передает текущую страницу в класс api\n\n    try {\n        await apiService.fetchSearchMovie().then(data => {\n          if (data.total_pages === 0) {\n             return refs.errorText.classList.remove('is-hidden');\n           };\n            pagination.setCurrentPage = queryPage; // Передает страницу в пагинатор\n            pagination.setTotalPages = data.total_pages; // Передает общее кол-во страниц в пагинатор\n            pagination.setCallback = getSearchMovie; // Передает ссылку на коллбэк функцию \n            pagination.renderPagination(); // Вызов пагинации\n            \n            refs.errorText.classList.add('is-hidden');\n            \n            renderFilmList(data.results);\n            addCurrrentMoviesToLocalStorage(data.results);\n            // console.log(data.total_pages);\n        });      \n    } catch (error) {\n        console.log(error)\n    } finally {\n       hidePreloader();\n    }\n    \n}\n\n///////////// --функція перенесена в файл create-markup----///////\n// function renderMoviesCard(results) {\n//     const markup = results\n//         .map(el => {\n//             return `\n//             <li class=\"main-container--card\">\n//             <img src = \"https://image.tmdb.org/t/p/w500${el.poster_path}\"\n//             class = \"film-poster\"\n//             alt=\"${el.original_title}\" loading=\"lazy\"\n//              />\n//             <div class=\"film-info\">\n//             <h3 class=\"film-title\">${el.original_title.toUpperCase()}</h3>\n//             <p class=\"more-info\">${transformId(el.genre_ids)} | ${el.release_date.slice(0, 4)}</p>\n//             </div>\n//             </li> `\n//         })\n//         .join('');\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', markup);\n// };\n\n///////////// --функція перенесена в файл create-markup----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let y = 0; y < array.length; y++) {\n//             if (array[y] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[y] = genreName\n//             };\n//         };\n//     };\n//     // console.log(array)\n//     if (array.length > 3) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     } else if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, ${array[2]}`\n//     } else if (array.length > 1) {\n//         return `${array[0]}, ${array[1]}`\n//     }\n//     return `${array[0]}`\n// };\n\n\n","import refs from \"./refs\";\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\n\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n\n\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n  refs.containerBox.innerHTML = '';\n\n    const markup = films\n      .map((film) => {\n            let date = film.release_date ?? film.first_air_date ?? null;\n            date = (date !== null) ? date.slice(0, 4) : '';\n            \n            let posterPath = ``\n            if(film.poster_path){posterPath=`${IMG_URL}${film.poster_path}`}\n            else{posterPath=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}\n\n            return `\n            <li class=\"main-container--card\"\n        data-modal-open>\n        <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src='${posterPath}'\n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date} </p>\n         </div>\n    </li>`;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    const filmCards = films\n      .map((film) => {\n          let date = film.release_date ?? film.first_air_date ?? null;\n          date = (date !== null) ? date.slice(0, 4) : '';\n\n        if (!film.poster_path) {\n          return `\n        <li class=\"main-container--card\"\n        data-modal-open>\n          <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\" >\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n         </div>\n    </li>`;\n        };        \n\n        return `\n        <li class=\"main-container--card\"\n        data-modal-open>\n          <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"${IMG_URL}${film.poster_path}\" \n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n         </div>\n    </li>`;\n        }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n};\n\nexport {renderMoviesCard};\n\n\nfunction transformId([...arr]) {\n  const g = localStorage.getItem('GENRES');\n  const genres = JSON.parse(g);\n  let genreName;\n  const array = [...arr];\n  for (let i = 0; i < genres.length; i++) {\n    for (let x = 0; x < array.length; x++) {\n      if (array[x] === genres[i].id) {\n        genreName = genres[i].name;\n        array[x] = genreName;\n      }\n    }\n  }\n  // console.log(array)\n\n  if (array.length > 2) {\n    return `${array[0]}, ${array[1]}, Other`;\n  } else if (array.length === 1) {\n        return `${array[0]}`\n  }\n  else if (array.length === 0) {\n    return `No genre`;\n  }\n  return `${array[0]}, ${array[1]}`;\n}\n\n\n// import refs from \"./refs\";\n// import { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\n\n\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\";\n\n\n\n\n// ///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\n// function renderFilmList(films) {\n//     const markup = films\n//         .map((film) => {\n//         console.log(film)\n//             return `\n//             <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${film.poster_path === null ? './no_image.jpg'\n//               : `${IMG_URL}${film.poster_path}`\n//           }\"\n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} </p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n// refs.containerBox.innerHTML = markup;\n// }\n\n// export {renderFilmList};\n\n// ///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\n// function renderMoviesCard(films) {\n//     const filmCards = films\n//     .map((film) => {\n//         return `\n//         <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${IMG_URL}${film.poster_path}\" \n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n// };\n\n// export {renderMoviesCard};\n\n\n// ///////////// --функція для створення списку жанрів----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let x = 0; x < array.length; x++) {\n//             if (array[x] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[x] = genreName\n//             };\n//         };\n//     };\n//      if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     }\n//     return `${array[0]}, ${array[1]}`\n// };\n"],"names":["$bpxeT","parcelRequire","$q7ZX2","$9fb1b926e193e8ae$var$IMG_URL","$9fb1b926e193e8ae$export$f2275db3dee9e567","films","$4Nugj","default","containerBox","innerHTML","markup","map","film","_release_date","ref","date","release_date","first_air_date","slice","posterPath","poster_path","concat","id","original_name","original_title","toUpperCase","title","$9fb1b926e193e8ae$var$transformId","genre_ids","join","param","genreName","arr","$parcel$interopDefault","g","localStorage","getItem","genres","JSON","parse","array","$8nrFW","i","length","x","name","$ffc2dcc44f21eabb$var$apiService","$1h2Gi","$ffc2dcc44f21eabb$var$pagination","$jcFG7","$ffc2dcc44f21eabb$var$getSearchMovie","$ffc2dcc44f21eabb$var$_getSearchMovie","apply","this","arguments","$2TvXO","mark","_callee","page","queryPage","_args","setPageNumber","fetchSearchMovie","then","data","total_pages","errorText","classList","remove","setCurrentPage","setTotalPages","setCallback","renderPagination","add","results","$4LMMA","addCurrrentMoviesToLocalStorage","console","log","_ctx","t0","$kvC6y","hidePreloader","searchForm","addEventListener","event","preventDefault","inputQuery","currentTarget","elements","query","value","trim","inputEl","preloaderShow"],"version":3,"file":"index.20ac4659.js.map"}