{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BCAAC,EAAAD,EAAA,S,qCAIA,IAAME,EAAU,kCA0BiB,SAAxBC,EAAiBC,GACtB,IAAMC,EAAYD,EACjBE,KAAI,SAACC,GACF,MAAO,4FAGUC,OAAVN,GACAM,OADUD,EAAKE,YAAY,qBAEvBD,OADJD,EAAKG,cAAc,uCAGQF,OAFvBD,EAAKI,GAAG,iFAE2BH,OAAZD,EAAKI,GAAG,MAClBH,OADsBD,EAAKK,eAAeC,eAAiBN,EAAKO,MAAMD,eAAiBN,EAAKO,MAAMD,cAAc,yCAC/EL,OAAjCO,EAAYR,EAAKS,WAAW,OAAoFR,QAA9ED,EAAKU,cAAgBC,gBAAgBC,MAAM,EAAE,GAAG,gCAAgDX,OAAlBD,EAAKa,aAAa,gDAGvJC,KAAK,IAEZC,EAAAC,QAAKC,gBAAgBC,mBAAmB,YAAapB,GAOzD,SAASU,EAAaW,GAMlB,I,IAHIC,EAHeC,EAAOC,EAAA5B,EAAA,CAARyB,GAAQP,MAAP,GACbW,EAAIC,aAAaC,QAAQ,UACzBC,EAASC,KAAKC,MAAML,GAEpBM,EAASP,EAAAQ,EAAA,CAAGT,GAETU,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAE/B,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAMG,OAAQC,IAC1BJ,EAAMI,KAAOP,EAAOK,GAAG3B,KACvBgB,EAAYM,EAAOK,GAAGG,KACtBL,EAAMI,GAAKb,GAKvB,OADAe,QAAQC,IAAIP,GACRA,EAAMG,OAAS,EACR,GAAgB/B,OAAb4B,EAAM,GAAG,MAAa5B,OAAT4B,EAAM,GAAG,WAE7B,GAAgB5B,OAAb4B,EAAM,GAAG,MAAa5B,OAAT4B,EAAM,IDpEjC,IAAMQ,EAAO,CACTC,WAAYC,SAASC,cAAc,sBACnCC,QAASF,SAASC,cAAc,iBAChCvB,gBAAiBsB,SAASC,cAAc,8BACxCE,UAAWH,SAASC,cAAc,sBAIlCG,EAAc,GAEZC,EAAY,4CACZC,EAAO,mC,SAEEC,EAAiBC,G,OAAjBC,EAAgBC,MAAAC,KAAAC,W,SAAhBH,I,OAAAA,EAAf1B,EAAA9B,EAAA,CAAA8B,EAAA8B,GAAAC,MAAA,SAAAC,EAAgCP,G,kFACfzB,EAAAiC,GAAMC,IAAI,GAAuBvD,OAApB2C,EAAS,aAAuC3C,OAA5B4C,EAAI,0BAAoC5C,OAAZ8C,IACrEU,MAAK,SAAAC,G,OAAYA,EAASC,Q,oFAFJV,MAAAC,KAAAC,W,SAQhBS,I,OAAAA,EAAftC,EAAA9B,EAAA,CAAA8B,EAAA8B,GAAAC,MAAA,SAAAC,EAAwBO,G,IAcVC,E,qEAbVD,EAAME,iBAENpB,EAAckB,EAAMG,cAAcC,SAASC,MAAMC,MAAMC,OAGvD/B,EAAKK,UAAU2B,UAAUC,IAAI,aAGT,KAAhB3B,EAAkB,C,wCACXN,EAAKK,UAAU2B,UAAUE,OAAO,c,gCAIlBzB,EAAiBH,G,UAEX,KAFrBmB,EAAMU,EAAAC,MAEDC,YAAiB,C,yCAChBrC,EAAKK,UAAU2B,UAAUE,OAAO,c,QAG5CI,IACAtC,EAAKK,UAAU2B,UAAUC,IAAI,aAC7B1E,EAAiBkE,EAAOc,SACxBC,gCAAiCf,EAAOc,SACxCzC,QAAQC,IAAI0B,EAAOc,S,kDAELzC,QAAQC,IAAGoC,EAAAM,I,QAE7BzC,EAAKI,QAAQ0B,MAAQ,G,2DA5BFlB,MAAAC,KAAAC,WA8EvB,SAASwB,IACPtC,EAAKpB,gBAAgB8D,UAAY,GAjFnC1C,EAAKC,WAAW0C,iBAAiB,U,SAETnB,G,OAATD,EAAQX,MAAAC,KAAAC,c","sources":["src/js/search-by-keyword.js","src/js/create-markup.js"],"sourcesContent":["import axios from \"axios\";\nimport { renderMoviesCard } from \"./create-markup\"\n\n\nconst refs = {\n    searchForm: document.querySelector('.header_input-wrap'),\n    inputEl: document.querySelector('.header_input'),\n    moviesContainer: document.querySelector('.main-container--card__box'),\n    errorText: document.querySelector('.header_error-msg'),\n};\n\n///////Буде винесено в інший файл\nlet searchQuery = '';\n\nconst BASE_URL = `https://api.themoviedb.org/3/search/movie`;\nconst KEY = `2994e3a31c3cad99fd99bf3fe61d916f`;\n\nasync function fetchSearchMovie(searchQuery) {\n    return await axios.get(`${BASE_URL}?api_key=${KEY}&language=en-US&query=${searchQuery}`)\n        .then(response => response.data);\n}\n///////////\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nasync function onSearch(event) {\n    event.preventDefault();\n\n    searchQuery = event.currentTarget.elements.query.value.trim();\n    // console.log(searchQuery);\n\n    refs.errorText.classList.add('is-hidden');\n    \n\n    if (searchQuery === '') {\n        return refs.errorText.classList.remove('is-hidden');\n    };\n   \n    try {\n        const movies = await fetchSearchMovie(searchQuery);\n\n        if (movies.total_pages === 0) {\n             return refs.errorText.classList.remove('is-hidden');\n        };\n\n        clearMoviesContainer();\n        refs.errorText.classList.add('is-hidden');\n        renderMoviesCard(movies.results);\n        addCurrrentMoviesToLocalStorage (movies.results) \n        console.log(movies.results);\n        \n    } catch (error) { console.log(error) };\n\n    refs.inputEl.value = \"\";\n}\n\n///////////// --функція перенесена в файл create-markup----///////\n// function renderMoviesCard(results) {\n//     const markup = results\n//         .map(el => {\n//             return `\n//             <li class=\"main-container--card\">\n//             <img src = \"https://image.tmdb.org/t/p/w500${el.poster_path}\"\n//             class = \"film-poster\"\n//             alt=\"${el.original_title}\" loading=\"lazy\"\n//              />\n//             <div class=\"film-info\">\n//             <h3 class=\"film-title\">${el.original_title.toUpperCase()}</h3>\n//             <p class=\"more-info\">${transformId(el.genre_ids)} | ${el.release_date.slice(0, 4)}</p>\n//             </div>\n//             </li> `\n//         })\n//         .join('');\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', markup);\n// };\n\n///////////// --функція перенесена в файл create-markup----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let y = 0; y < array.length; y++) {\n//             if (array[y] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[y] = genreName\n//             };\n//         };\n//     };\n//     // console.log(array)\n//     if (array.length > 3) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     } else if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, ${array[2]}`\n//     } else if (array.length > 1) {\n//         return `${array[0]}, ${array[1]}`\n//     }\n//     return `${array[0]}`\n// };\n\n\nfunction clearMoviesContainer() {\n  refs.moviesContainer.innerHTML = '';\n}\n\n","import refs from \"./refs\";\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n    const markup = films\n        .map((film) => {\n        console.log(film)\n            return `\n            <li class=\"main-container--card\">\n            <img class=\"film-poster\" \n            src=\"${IMG_URL}${film.poster_path}\" \n            alt=\"${film.original_name}\" loading=\"lazy\"\n            data-id=\"${film.id}\">\n            <div class=\"film-info\">\n            <h2 class=\"film-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n            <p class=\"more-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)}</p>\n             </div>\n        </li>\n  `;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    const filmCards = films\n    .map((film) => {\n        return `\n    <li class=\"main-container--card\">\n        <img class=\"film-poster\" \n        src=\"${IMG_URL}${film.poster_path}\" \n        alt=\"${film.original_name}\" loading=\"lazy\"\n        data-id=\"${film.id}\">\n        <div class=\"film-info\">\n        <h2 class=\"film-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"more-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"film-rating\"> ${film.vote_average} </span> </p>\n         </div>\n    </li>`;\n        }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n};\n\nexport {renderMoviesCard};\n\n\n///////////// --функція для створення списку жанрів----///////\nfunction transformId ([...arr]) {\n    const g = localStorage.getItem(\"GENRES\");\n    const genres = JSON.parse(g);\n    let genreName;\n    const array = [...arr]\n    // console.log(genres)\n    for (let i = 0; i < genres.length; i++) {\n        // console.log(genres[i]);\n        for (let x = 0; x < array.length; x++) {\n            if (array[x] === genres[i].id) {\n                genreName = genres[i].name;\n                array[x] = genreName\n            };\n        };\n    };\n    console.log(array)\n    if (array.length > 2) {\n        return `${array[0]}, ${array[1]}, Other`\n    }\n    return `${array[0]}, ${array[1]}`\n};"],"names":["$bpxeT","parcelRequire","$q7ZX2","$9fb1b926e193e8ae$var$IMG_URL","$9fb1b926e193e8ae$export$f48ccfcd8b08d9f9","films","filmCards","map","film","concat","poster_path","original_name","id","original_title","toUpperCase","title","$9fb1b926e193e8ae$var$transformId","genre_ids","release_date","first_air_date","slice","vote_average","join","$4Nugj","default","moviesContainer","insertAdjacentHTML","param","genreName","arr","$parcel$interopDefault","g","localStorage","getItem","genres","JSON","parse","array","$8nrFW","i","length","x","name","console","log","$ffc2dcc44f21eabb$var$refs","searchForm","document","querySelector","inputEl","errorText","$ffc2dcc44f21eabb$var$searchQuery","$ffc2dcc44f21eabb$var$BASE_URL","$ffc2dcc44f21eabb$var$KEY","$ffc2dcc44f21eabb$var$fetchSearchMovie","searchQuery1","$ffc2dcc44f21eabb$var$_fetchSearchMovie","apply","this","arguments","$2TvXO","mark","_callee","$dIxxU","get","then","response","data","$ffc2dcc44f21eabb$var$_onSearch","event","movies","preventDefault","currentTarget","elements","query","value","trim","classList","add","remove","_ctx","sent","total_pages","$ffc2dcc44f21eabb$var$clearMoviesContainer","results","addCurrrentMoviesToLocalStorage","t0","innerHTML","addEventListener"],"version":3,"file":"index.acb730f9.js.map"}