{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SCAAC,EAAAD,EAAA,S,WA8BiC,SAAxBE,EAAiBC,GACtB,MAAMC,EAAYD,EACjBE,KAAKC,GACK,2HAGUA,EAAKC,+BACfD,EAAKE,mDACDF,EAAKG,kFAEkBH,EAAKG,OAAOH,EAAKI,eAAeC,eAAiBL,EAAKM,MAAMD,eAAiBL,EAAKM,MAAMD,qDAClGE,EAAYP,EAAKQ,iBAAiBR,EAAKS,cAAgBC,gBAAgBC,MAAM,EAAE,iCAAiCX,EAAKY,0DAG1IC,KAAK,IAEZlB,EAAAmB,QAAKC,gBAAgBC,mBAAmB,YAAalB,GAOzD,SAASS,MAAiBU,IACtB,MAAMC,EAAIC,aAAaC,QAAQ,UACzBC,EAASC,KAAKC,MAAML,GAC1B,IAAIM,EACJ,MAAMC,EAAQ,IAAIR,GAElB,IAAK,IAAIS,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAE/B,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAME,OAAQC,IAC1BH,EAAMG,KAAOP,EAAOK,GAAGvB,KACvBqB,EAAYH,EAAOK,GAAGG,KACtBJ,EAAMG,GAAKJ,GAKvB,OADAM,QAAQC,IAAIN,GACRA,EAAME,OAAS,EACR,GAAGF,EAAM,OAAOA,EAAM,YAE1B,GAAGA,EAAM,OAAOA,EAAM,KDpEjC,MAAMO,EAAO,CACTC,WAAYC,SAASC,cAAc,sBACnCC,QAASF,SAASC,cAAc,iBAChCpB,gBAAiBmB,SAASC,cAAc,8BACxCE,UAAWH,SAASC,cAAc,sBAIhB,IAAlBG,EAAc,GAWlBN,EAAKC,WAAWM,iBAAiB,UAEjCC,eAAwBC,GASpB,GARAA,EAAMC,iBAENJ,EAAcG,EAAME,cAAcC,SAASC,MAAMC,MAAMC,OAGvDf,EAAKK,UAAUW,UAAUC,IAAI,aAGT,KAAhBX,EACA,OAAON,EAAKK,UAAUW,UAAUE,OAAO,aAG3C,IACI,MAAMC,QAtBdX,eAAgCY,GAC5B,aAAaC,EAAA5D,GAAM6D,IAAI,2GAAmDF,KACrEG,MAAKC,GAAYA,EAASC,OAoBNC,CAAiBpB,GAEtC,GAA2B,IAAvBa,EAAOQ,YACN,OAAO3B,EAAKK,UAAUW,UAAUE,OAAO,aA8DlDlB,EAAKjB,gBAAgB6C,UAAY,GA1D3B5B,EAAKK,UAAUW,UAAUC,IAAI,aAC7BrD,EAAiBuD,EAAOU,SACxBC,gCAAiCX,EAAOU,SACxC/B,QAAQC,IAAIoB,EAAOU,SAErB,MAAOE,GAASjC,QAAQC,IAAIgC,GAE9B/B,EAAKI,QAAQU,MAAQ","sources":["src/js/search-by-keyword.js","src/js/create-markup.js"],"sourcesContent":["import axios from \"axios\";\nimport { renderMoviesCard } from \"./create-markup\"\n\n\nconst refs = {\n    searchForm: document.querySelector('.header_input-wrap'),\n    inputEl: document.querySelector('.header_input'),\n    moviesContainer: document.querySelector('.main-container--card__box'),\n    errorText: document.querySelector('.header_error-msg'),\n};\n\n///////Буде винесено в інший файл\nlet searchQuery = '';\n\nconst BASE_URL = `https://api.themoviedb.org/3/search/movie`;\nconst KEY = `2994e3a31c3cad99fd99bf3fe61d916f`;\n\nasync function fetchSearchMovie(searchQuery) {\n    return await axios.get(`${BASE_URL}?api_key=${KEY}&language=en-US&query=${searchQuery}`)\n        .then(response => response.data);\n}\n///////////\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nasync function onSearch(event) {\n    event.preventDefault();\n\n    searchQuery = event.currentTarget.elements.query.value.trim();\n    // console.log(searchQuery);\n\n    refs.errorText.classList.add('is-hidden');\n    \n\n    if (searchQuery === '') {\n        return refs.errorText.classList.remove('is-hidden');\n    };\n   \n    try {\n        const movies = await fetchSearchMovie(searchQuery);\n\n        if (movies.total_pages === 0) {\n             return refs.errorText.classList.remove('is-hidden');\n        };\n\n        clearMoviesContainer();\n        refs.errorText.classList.add('is-hidden');\n        renderMoviesCard(movies.results);\n        addCurrrentMoviesToLocalStorage (movies.results) \n        console.log(movies.results);\n        \n    } catch (error) { console.log(error) };\n\n    refs.inputEl.value = \"\";\n}\n\n///////////// --функція перенесена в файл create-markup----///////\n// function renderMoviesCard(results) {\n//     const markup = results\n//         .map(el => {\n//             return `\n//             <li class=\"main-container--card\">\n//             <img src = \"https://image.tmdb.org/t/p/w500${el.poster_path}\"\n//             class = \"film-poster\"\n//             alt=\"${el.original_title}\" loading=\"lazy\"\n//              />\n//             <div class=\"film-info\">\n//             <h3 class=\"film-title\">${el.original_title.toUpperCase()}</h3>\n//             <p class=\"more-info\">${transformId(el.genre_ids)} | ${el.release_date.slice(0, 4)}</p>\n//             </div>\n//             </li> `\n//         })\n//         .join('');\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', markup);\n// };\n\n///////////// --функція перенесена в файл create-markup----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let y = 0; y < array.length; y++) {\n//             if (array[y] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[y] = genreName\n//             };\n//         };\n//     };\n//     // console.log(array)\n//     if (array.length > 3) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     } else if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, ${array[2]}`\n//     } else if (array.length > 1) {\n//         return `${array[0]}, ${array[1]}`\n//     }\n//     return `${array[0]}`\n// };\n\n\nfunction clearMoviesContainer() {\n  refs.moviesContainer.innerHTML = '';\n}\n\n","import refs from \"./refs\";\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n    const markup = films\n        .map((film) => {\n        console.log(film)\n            return `\n            <li class=\"main-container--card\">\n            <img class=\"film-poster\" \n            src=\"${IMG_URL}${film.poster_path}\" \n            alt=\"${film.original_name}\" loading=\"lazy\"\n            data-id=\"${film.id}\">\n            <div class=\"film-info\">\n            <h2 class=\"film-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n            <p class=\"more-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)}</p>\n             </div>\n        </li>\n  `;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    const filmCards = films\n    .map((film) => {\n        return `\n    <li class=\"main-container--card\">\n        <img class=\"film-poster\" \n        src=\"${IMG_URL}${film.poster_path}\" \n        alt=\"${film.original_name}\" loading=\"lazy\"\n        data-id=\"${film.id}\">\n        <div class=\"film-info\">\n        <h2 class=\"film-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"more-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"film-rating\"> ${film.vote_average} </span> </p>\n         </div>\n    </li>`;\n        }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n};\n\nexport {renderMoviesCard};\n\n\n///////////// --функція для створення списку жанрів----///////\nfunction transformId ([...arr]) {\n    const g = localStorage.getItem(\"GENRES\");\n    const genres = JSON.parse(g);\n    let genreName;\n    const array = [...arr]\n    // console.log(genres)\n    for (let i = 0; i < genres.length; i++) {\n        // console.log(genres[i]);\n        for (let x = 0; x < array.length; x++) {\n            if (array[x] === genres[i].id) {\n                genreName = genres[i].name;\n                array[x] = genreName\n            };\n        };\n    };\n    console.log(array)\n    if (array.length > 2) {\n        return `${array[0]}, ${array[1]}, Other`\n    }\n    return `${array[0]}, ${array[1]}`\n};"],"names":["$2shzp","parcelRequire","$krGWQ","$e91f9a2c1ec35283$export$f48ccfcd8b08d9f9","films","filmCards","map","film","poster_path","original_name","id","original_title","toUpperCase","title","$e91f9a2c1ec35283$var$transformId","genre_ids","release_date","first_air_date","slice","vote_average","join","default","moviesContainer","insertAdjacentHTML","arr","g","localStorage","getItem","genres","JSON","parse","genreName","array","i","length","x","name","console","log","$c808da8250b3ec39$var$refs","searchForm","document","querySelector","inputEl","errorText","$c808da8250b3ec39$var$searchQuery","addEventListener","async","event","preventDefault","currentTarget","elements","query","value","trim","classList","add","remove","movies","searchQuery1","$parcel$interopDefault","get","then","response","data","$c808da8250b3ec39$var$fetchSearchMovie","total_pages","innerHTML","results","addCurrrentMoviesToLocalStorage","error"],"version":3,"file":"index.dbb823e6.js.map"}