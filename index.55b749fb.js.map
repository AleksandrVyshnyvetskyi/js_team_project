{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,WAmCiC,SAAxBC,EAAiBC,GACtB,MAAMC,EAAYD,EACjBE,KAAKC,GACK,4HAIIA,EAAKC,qDACCD,EAAKE,+BACfF,EAAKG,4GAEsBH,EAAKC,OAAOD,EAAKI,eAAeC,eAAiBL,EAAKM,MAAMD,eAAiBL,EAAKM,MAAMD,qDAClGE,EAAYP,EAAKQ,iBAAiBR,EAAKS,cAAgBC,gBAAgBC,MAAM,EAAE,iCAAiCX,EAAKY,aAAaC,QAAQ,8CAG/JC,KAAK,IAEZpB,EAAAqB,QAAKC,gBAAgBC,mBAAmB,YAAanB,E,CAQzD,SAASS,MAAiBW,IACtB,MAAMC,EAAIC,aAAaC,QAAQ,UACzBC,EAASC,KAAKC,MAAML,GAC1B,IAAIM,EACJ,MAAMC,EAAQ,IAAIR,GAClB,IAAK,IAAIS,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAC/B,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAME,OAAQC,IAC1BH,EAAMG,KAAOP,EAAOK,GAAG1B,KACvBwB,EAAYH,EAAOK,GAAGG,KACtBJ,EAAMG,GAAKJ,GAMvB,OADAM,QAAQC,IAAIN,GACRA,EAAME,OAAS,EAER,GAAGF,EAAM,OAAOA,EAAM,YACtBA,EAAME,OAAS,EACf,GAAGF,EAAM,OAAOA,EAAM,OAAOA,EAAM,KACnCA,EAAME,OAAS,EAChB,GAAGF,EAAM,OAAOA,EAAM,KAEzB,GAAGA,EAAM,I,CCnEFO,SAASC,eAAe,a,2CCT1C,MAAMC,EAAO,CACTC,WAAYH,SAASI,cAAc,sBACnCC,QAASL,SAASI,cAAc,iBAChCrB,gBAAiBiB,SAASI,cAAc,8BACxCE,UAAWN,SAASI,cAAc,sBAGhCG,EAAa,IAAI,EAAAC,EAAA1B,SACjB2B,EAAa,IAAI,EAAAC,EAAA5B,SAiCvB6B,eAAeC,EAAeC,GAAO,GAEjC,MAAMC,EAAYD,GAAc,EACJN,EAAjBQ,cAAgBD,EAG3B,UACUP,EAAWS,mBAAmBC,MAAKC,IACvC,GAAyB,IAArBA,EAAKC,YACN,OAAOjB,EAAKI,UAAUc,UAAUC,OAAO,aAExCZ,EAAWa,eAAiBR,EACFL,EAAfc,cAAgBL,EAAKC,YACGV,EAAxBe,YAAcZ,EACKH,EAAnBgB,mBAgEnBvB,EAAKnB,gBAAgB2C,UAAY,GA9DzBxB,EAAKI,UAAUc,UAAUO,IAAI,aAE7BhE,EAAiBuD,EAAKU,UACtB,EAAAC,EAAAC,iCAAiCZ,EAAKU,SACtC9B,QAAQC,IAAImB,EAAKC,YAAY,G,CAEnC,MAAOY,GACLjC,QAAQC,IAAIgC,E,EA1CpB7B,EAAKC,WAAW6B,iBAAiB,UAEjC,SAAkBC,GAKd,GAHAA,EAAMC,iBACN3B,EAAW4B,WAAaF,EAAMG,cAAcC,SAASC,MAAMC,MAAMC,OAEtC,KAAvBtC,EAAKG,QAAQkC,MACZ,OAAOrC,EAAKI,UAAUc,UAAUC,OAAO,aAI5CnB,EAAKI,UAAUc,UAAUO,IAAI,aAE7Bf,IAEAV,EAAKG,QAAQkC,MAAQ,E","sources":["src/js/create-markup.js","src/js/loader.js","src/js/search-by-keyword.js"],"sourcesContent":["import refs from \"./refs\";\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\nconst IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n\n\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n    const markup = films\n        .map((film) => {\n        console.log(film)\n            return `\n            <li class=\"main-container--card\"\n        data-modal-open>\n        <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"${film.poster_path === null ? './no_image.jpg'\n              : `${IMG_URL}${film.poster_path}`\n          }\"\n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} </p>\n         </div>\n    </li>`;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    const filmCards = films\n    .map((film) => {\n        return `\n        <li class=\"main-container--card\"\n        data-modal-open>\n        <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"${IMG_URL}${film.poster_path}\" \n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n         </div>\n    </li>`;\n        }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n};\n\nexport {renderMoviesCard};\n\n\n///////////// --функція для створення списку жанрів----///////\nfunction transformId ([...arr]) {\n    const g = localStorage.getItem(\"GENRES\");\n    const genres = JSON.parse(g);\n    let genreName;\n    const array = [...arr]\n    for (let i = 0; i < genres.length; i++) {\n        for (let x = 0; x < array.length; x++) {\n            if (array[x] === genres[i].id) {\n                genreName = genres[i].name;\n                array[x] = genreName\n            };\n        };\n    };\n    \n    console.log(array)\n    if (array.length > 3) {\n\n        return `${array[0]}, ${array[1]}, Other`\n    } else if (array.length > 2) {\n        return `${array[0]}, ${array[1]}, ${array[2]}`\n    } else if (array.length > 1) {\n       return `${array[0]}, ${array[1]}`\n   }\n    return `${array[0]}`\n};","//  Для встановлення Loader потрібно:\n// 1. Експортуємо функції у свій файл.\n\n//  import { preloaderShow, preloaderShowLonger, hidePreloader } from './loader';\n\n// 2. Ставимо функцію запуску лоадеру на початок події (завантаження файлів, рендер бібліотеки, пошук фільмів).\n\n// preloaderShowLonger();   - виключається сама  після 700мс після запуску,\n\n// preloaderShow();  виключається тільки після запуску  функції hidePreloader();\n\n// 3. Ставимо функцію зняття лоадеру на закінчення події (завантаження файлів, рендер бібліотеки, пошук фільмів)\n\n// hidePreloader();\n\n\nconst preloader = document.getElementById('preloader');\n\nfunction preloaderShow() {\n    preloader.classList.remove('done');\n    };\n\n\n\n  function hidePreloader() {\n    preloader.classList.add('done');\n  };\n\n\n  function preloaderShowLonger() {\n    preloader.classList.remove('done');\n    setTimeout(function () {\n        preloader.classList.add('done');\n    }, 700);\n};\n\n  export { preloaderShow, preloaderShowLonger, hidePreloader };\n","import { renderMoviesCard } from \"./create-markup\";\nimport { hideLoader, showLoader } from './loader';\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\nimport Pagination from './pagination.js';\nimport API from './api-service.js';\n\n\nconst refs = {\n    searchForm: document.querySelector('.header_input-wrap'),\n    inputEl: document.querySelector('.header_input'),\n    moviesContainer: document.querySelector('.main-container--card__box'),\n    errorText: document.querySelector('.header_error-msg'),\n};\n\nconst apiService = new API;\nconst pagination = new Pagination;\n\n///////винесено в api-service\n// let searchQuery = '';\n\n// const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n// const KEY = `2994e3a31c3cad99fd99bf3fe61d916f`;\n\n// async function fetchSearchMovie(searchQuery) {\n//     return await axios.get(`${BASE_URL}?api_key=${KEY}&language=en-US&query=${searchQuery}`)\n//         .then(response => response.data);\n// }\n///////////\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nfunction onSearch(event) {\n    \n    event.preventDefault();\n    apiService.inputQuery = event.currentTarget.elements.query.value.trim();\n\n    if (refs.inputEl.value === \"\") {\n         return refs.errorText.classList.remove('is-hidden');\n    }\n    \n    // console.log(searchQuery);\n    refs.errorText.classList.add('is-hidden');\n   \n    getSearchMovie();\n\n    refs.inputEl.value = \"\";\n}\n\nasync function getSearchMovie(page = false) {\n    \n    const queryPage = page ? page : 1; // Проверка страниц, обязательно до fetch\n    apiService.setPageNumber = queryPage; // Передает текущую страницу в класс api\n\n    // showLoader();\n    try {\n        await apiService.fetchSearchMovie().then(data => {\n          if (data.total_pages === 0) {\n             return refs.errorText.classList.remove('is-hidden');\n           };\n            pagination.setCurrentPage = queryPage; // Передает страницу в пагинатор\n            pagination.setTotalPages = data.total_pages; // Передает общее кол-во страниц в пагинатор\n            pagination.setCallback = getSearchMovie; // Передает ссылку на коллбэк функцию \n            pagination.renderPagination(); // Вызов пагинации\n            clearMoviesContainer();\n            refs.errorText.classList.add('is-hidden');\n            \n            renderMoviesCard(data.results);\n            addCurrrentMoviesToLocalStorage (data.results) \n            console.log(data.total_pages);\n        });      \n    } catch (error) {\n        console.log(error)\n    } finally {\n        // hideLoader();\n    }\n    \n}\n\n///////////// --функція перенесена в файл create-markup----///////\n// function renderMoviesCard(results) {\n//     const markup = results\n//         .map(el => {\n//             return `\n//             <li class=\"main-container--card\">\n//             <img src = \"https://image.tmdb.org/t/p/w500${el.poster_path}\"\n//             class = \"film-poster\"\n//             alt=\"${el.original_title}\" loading=\"lazy\"\n//              />\n//             <div class=\"film-info\">\n//             <h3 class=\"film-title\">${el.original_title.toUpperCase()}</h3>\n//             <p class=\"more-info\">${transformId(el.genre_ids)} | ${el.release_date.slice(0, 4)}</p>\n//             </div>\n//             </li> `\n//         })\n//         .join('');\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', markup);\n// };\n\n///////////// --функція перенесена в файл create-markup----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let y = 0; y < array.length; y++) {\n//             if (array[y] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[y] = genreName\n//             };\n//         };\n//     };\n//     // console.log(array)\n//     if (array.length > 3) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     } else if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, ${array[2]}`\n//     } else if (array.length > 1) {\n//         return `${array[0]}, ${array[1]}`\n//     }\n//     return `${array[0]}`\n// };\n\n\nfunction clearMoviesContainer() {\n    refs.moviesContainer.innerHTML = \"\";\n}\n\n"],"names":["$krGWQ","parcelRequire","$e91f9a2c1ec35283$export$f48ccfcd8b08d9f9","films","filmCards","map","film","id","poster_path","original_name","original_title","toUpperCase","title","$e91f9a2c1ec35283$var$transformId","genre_ids","release_date","first_air_date","slice","vote_average","toFixed","join","default","moviesContainer","insertAdjacentHTML","arr","g","localStorage","getItem","genres","JSON","parse","genreName","array","i","length","x","name","console","log","document","getElementById","$c808da8250b3ec39$var$refs","searchForm","querySelector","inputEl","errorText","$c808da8250b3ec39$var$apiService","$7me8F","$c808da8250b3ec39$var$pagination","$2nhTy","async","$c808da8250b3ec39$var$getSearchMovie","page","queryPage","setPageNumber","fetchSearchMovie","then","data","total_pages","classList","remove","setCurrentPage","setTotalPages","setCallback","renderPagination","innerHTML","add","results","$b5rV1","addCurrrentMoviesToLocalStorage","error","addEventListener","event","preventDefault","inputQuery","currentTarget","elements","query","value","trim"],"version":3,"file":"index.55b749fb.js.map"}