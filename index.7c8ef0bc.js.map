{"mappings":"8vBAAA,IAAAA,EAAAC,EAAA,S,iEAeqBC,SAASC,cAAc,8BAC5BD,SAASC,cAAc,iBAfvC,MAiBMC,EAAa,IAAI,EAAAC,EAAAC,SACjBC,EAAa,IAAI,EAAAC,EAAAF,UASmE,SAAjFG,EAAgBC,GAAO,IAC9B,EAAAC,EAAAC,uBACA,MAAMC,EAAYH,GAAc,EACJN,EAAjBU,cAAgBD,EAIET,EAAlBW,oBAAoBC,MAAKC,IAClCV,EAAWW,eAAiBL,EACFN,EAAfY,cAAgBF,EAAKG,YACGb,EAAxBc,YAAcZ,EACKF,EAAnBe,oBACG,EAAdC,EAAAC,iCAAgCP,EAAKQ,SACrCC,EAAeT,EAAKQ,QAAQ,G,CApBhChB,GAwBoBkB,WAClB,MAAMC,QAAiBC,EAAA7B,GAAM8B,IAC3B,2GAEFJ,EAAeE,EAASX,KAAKQ,UAC7B,EAAAF,EAAAC,iCAAgCI,EAASX,KAAKQ,SACvCG,EAASX,IAAI,EAGtBc,GAyD2D,SAAlDL,EAAeM,GACtBC,EAAA3B,QAAK4B,aAAaC,UAAY,GAE5B,MAAMC,EAASJ,EACZK,KAAKC,I,IACWC,EAAAC,EAAX,IAAIC,EAA+C,QAAxCD,EAAiB,QAAjBD,EAAAD,EAAKI,oBAAY,IAAjBH,IAAqBD,EAAKK,sBAAc,IAAxCH,IAA4C,KAGvD,OAFAC,EAAiB,OAAVA,EAAkBA,EAAKG,MAAM,EAAG,GAAK,GAErC,gIAIAN,EAAKO,sBACTP,EAAKQ,YAAc,kCAAaR,EAAKQ,cAAgB,+FACrDR,EAAKS,4GAEsBT,EAAKO,OAAOP,EAAKU,eAAeC,eAAiBX,EAAKY,MAAMD,qDACtEE,EAAYb,EAAKc,gBAAgBX,oCAEvD,IACCY,KAAK,IAChBpB,EAAA3B,QAAK4B,aAAaC,UAAYC,C,CAMG,SAAxBkB,EAAiBtB,GACtB,GAAIA,IAAU,GACd,OAEA,MAAMuB,EAAYvB,EACfK,KAAKC,I,IACOC,EAAAC,EAAX,IAAIC,EAA+C,QAAxCD,EAAiB,QAAjBD,EAAAD,EAAKI,oBAAY,IAAjBH,IAAqBD,EAAKK,sBAAc,IAAxCH,IAA4C,KAGvD,OAFAC,EAAiB,OAAVA,EAAkBA,EAAKG,MAAM,EAAG,GAAK,GAErC,gHAIAN,EAAKO,kBACTP,EAAKQ,YAAc,kCAAaR,EAAKQ,cAAgB,2FACrDR,EAAKS,oGAEsBT,EAAKO,OAAOP,EAAKU,eAAeC,eAAiBX,EAAKY,MAAMD,iDACtEE,EAAYb,EAAKc,gBAAgBX,+BAAkCH,EAAKkB,aAAaC,QAAQ,mCAEnH,IACCJ,KAAK,IAERpB,EAAA3B,QAAKoD,gBAAgBC,mBAAmB,YAAaJ,E,CAOzD,SAASJ,MAAgBS,IACvB,MAAMC,EAAIC,aAAaC,QAAQ,UACzBC,EAASC,KAAKC,MAAML,GAC1B,IAAIM,EACJ,MAAMC,EAAQ,IAAIR,GAClB,IAAK,IAAIS,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IACjC,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAME,OAAQC,IAC5BH,EAAMG,KAAOP,EAAOK,GAAGxB,KACzBsB,EAAYH,EAAOK,GAAGG,KACtBJ,EAAMG,GAAKJ,GAMjB,OAAIC,EAAME,OAAS,EACV,GAAGF,EAAM,OAAOA,EAAM,YACH,IAAjBA,EAAME,OACJ,GAAGF,EAAM,KAEI,IAAjBA,EAAME,OACN,WAEF,GAAGF,EAAM,OAAOA,EAAM,I,CAvICzC,WAC9B,MAAMqC,QAAenC,EAAA7B,GAAM8B,IACzB,yGAEFgC,aAAaW,QAAQ,SAAUR,KAAKS,UAAUV,EAAO/C,KAAK+C,QAAQ,EAGpEW,E","sources":["src/js/fetch-films-main.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '2994e3a31c3cad99fd99bf3fe61d916f';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nimport Pagination from './pagination.js';\nimport API from './api-service.js';\nimport { addCurrrentMoviesToLocalStorage } from './local-storage';\nimport { preloaderShow, preloaderShowLonger, hidePreloader } from './loader';\n// import { renderFilmList } from './create-markup';\nimport refs from './refs'\n\n// const refs = {\n//   containerBox: document.querySelector(`.main-container--card__box`),\n//   containerCard: document.querySelector(`.main-container--card`),\n// };\n\nconst containerBox = document.querySelector(`.main-container--card__box`);\nconst inputEl = document.querySelector('.header_input');\n\nconst apiService = new API;\nconst pagination = new Pagination;\n\ngetPopularMovie();\n\n\n\n\n\n// Фун-ия, которая берет и передает данные по апи, имеет первый! параметр page = false. После параметра page можете передавать свои.\nfunction getPopularMovie(page = false) {\n  preloaderShowLonger();\n  const queryPage = page ? page : 1; // Проверка страниц, обязательно до fetch\n  apiService.setPageNumber = queryPage; // Передает текущую страницу в класс api\n\n\n\n  apiService.fetchPopularMovie().then(data => {\n    pagination.setCurrentPage = queryPage; // Передает страницу в пагинатор\n    pagination.setTotalPages = data.total_pages; // Передает общее кол-во страниц в пагинатор\n    pagination.setCallback = getPopularMovie; // Передает ссылку на коллбэк функцию\n    pagination.renderPagination(); // Вызов пагинации\n    addCurrrentMoviesToLocalStorage(data.results);\n    renderFilmList(data.results);\n  });\n}\n\nconst searchFilms = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  renderFilmList(response.data.results);\n  addCurrrentMoviesToLocalStorage(response.data.results);\n  return response.data;\n};\n\nsearchFilms();\n\nconst addGenresToLocalStorage = async () => {\n  const genres = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`\n  );\n  localStorage.setItem('GENRES', JSON.stringify(genres.data.genres));\n};\n\naddGenresToLocalStorage();\n\n\n\n\n// function renderFilmList (films){\n//   const markup = films.map(film => {\n//       return `\n//         <li class=\"main-container--card\">\n//             <img\n//             class=\"film-poster\"\n//             src=\"${\n//               film.poster_path === null\n//                 ? './no_image.jpg'\n//                 : `https://image.tmdb.org/t/p/w500${film.poster_path}`\n//             }\" \n//                 alt=\"${film.original_title}\"\n//                 loading=\"lazy\" data-id=\"${film.id}\">\n//             <p class=\"film-info\">\n//             <h2 class=\"film-title\" data-id=\"${\n//               film.id\n//             }\">${film.original_title.toUpperCase()}</h2>\n//             <p class=\"more-info\"> ${transformId(\n//               film.genre_ids\n//             )} | ${film.release_date.slice(0, 4)}</p>\n//             </p>\n//         </li>\n//       `;\n//     })\n//     .join('');\n//   refs.containerBox.innerHTML = markup;\n// }\n\n\n// =============================================================================================================================\n\n\n// import refs from \"./refs\";\n// import { addCurrrentMoviesToLocalStorage } from \"./local-storage\"\n\n\n\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\"\n\n\n\n\n///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\nfunction renderFilmList(films) {\n  refs.containerBox.innerHTML = '';\n\n    const markup = films\n      .map((film) => {\n            let date = film.release_date ?? film.first_air_date ?? null;\n            date = (date !== null) ? date.slice(0, 4) : '';\n                        \n            return `\n            <li class=\"main-container--card\"\n        data-modal-open>\n        <img class=\"card-poster\"\n        data-id=\"${film.id}\" \n        src=\"${film.poster_path ? `${IMG_URL}${film.poster_path}` : \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}\"\n        alt=\"${film.original_name}\" loading=\"lazy\">\n        <div class=\"card-wrap\">\n        <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase()}</h2>\n        <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date} </p>\n         </div>\n    </li>`;\n        }).join(\"\");\nrefs.containerBox.innerHTML = markup;\n}\n\nexport {renderFilmList};\n\n///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\nfunction renderMoviesCard(films) {\n    if (films === []) {\n    return\n  };\n    const filmCards = films\n      .map((film) => {\n        let date = film.release_date ?? film.first_air_date ?? null;\n        date = (date !== null) ? date.slice(0, 4) : '';\n                    \n        return `\n        <li class=\"main-container--card\"\n    data-modal-open>\n    <img class=\"card-poster\"\n    data-id=\"${film.id}\" \n    src=\"${film.poster_path ? `${IMG_URL}${film.poster_path}` : \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\"}\"\n    alt=\"${film.original_name}\" loading=\"lazy\">\n    <div class=\"card-wrap\">\n    <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase()}</h2>\n    <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${date}<span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n     </div>\n</li>`;\n    }).join(\"\");\n    \n    refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n};\n\nexport {renderMoviesCard};\n////////<span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span>\n\nfunction transformId([...arr]) {\n  const g = localStorage.getItem('GENRES');\n  const genres = JSON.parse(g);\n  let genreName;\n  const array = [...arr];\n  for (let i = 0; i < genres.length; i++) {\n    for (let x = 0; x < array.length; x++) {\n      if (array[x] === genres[i].id) {\n        genreName = genres[i].name;\n        array[x] = genreName;\n      }\n    }\n  }\n  // console.log(array)\n\n  if (array.length > 2) {\n    return `${array[0]}, ${array[1]}, Other`;\n  } else if (array.length === 1) {\n        return `${array[0]}`\n  }\n  else if (array.length === 0) {\n    return `No genre`;\n  }\n  return `${array[0]}, ${array[1]}`;\n}\n\n\n// import refs from \"./refs\";\n// import { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\n\n\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\";\n\n\n\n\n// ///////////// --функція для створення карток популярних фільмів на головну сторінку----///////\n// function renderFilmList(films) {\n//     const markup = films\n//         .map((film) => {\n//         console.log(film)\n//             return `\n//             <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${film.poster_path === null ? './no_image.jpg'\n//               : `${IMG_URL}${film.poster_path}`\n//           }\"\n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} </p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n// refs.containerBox.innerHTML = markup;\n// }\n\n// export {renderFilmList};\n\n// ///////////// --функція для створення карток  фільмів в MY LIBRARY----///////\n// function renderMoviesCard(films) {\n//     const filmCards = films\n//     .map((film) => {\n//         return `\n//         <li class=\"main-container--card\"\n//         data-modal-open>\n//         <img class=\"card-poster\"\n//         data-id=\"${film.id}\" \n//         src=\"${IMG_URL}${film.poster_path}\" \n//         alt=\"${film.original_name}\" loading=\"lazy\">\n//         <div class=\"card-wrap\">\n//         <h2 class=\"card-title\" data-id=\"${film.id}\">${film.original_title.toUpperCase() || film.title.toUpperCase() || film.title.toUpperCase()}</h2>\n//         <p class=\"card-info\"> ${transformId(film.genre_ids)} | ${(film.release_date || first_air_date).slice(0,4)} <span class=\"card-rating\"> ${film.vote_average.toFixed(1)}</span></p>\n//          </div>\n//     </li>`;\n//         }).join(\"\");\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', filmCards);\n    \n// };\n\n// export {renderMoviesCard};\n\n\n// ///////////// --функція для створення списку жанрів----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let x = 0; x < array.length; x++) {\n//             if (array[x] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[x] = genreName\n//             };\n//         };\n//     };\n//      if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     }\n//     return `${array[0]}, ${array[1]}`\n// };\n"],"names":["$2shzp","parcelRequire","document","querySelector","$7dbe43ef2045a1df$var$apiService","$7me8F","default","$7dbe43ef2045a1df$var$pagination","$2nhTy","$7dbe43ef2045a1df$var$getPopularMovie","page","$gjiCh","preloaderShowLonger","queryPage","setPageNumber","fetchPopularMovie","then","data","setCurrentPage","setTotalPages","total_pages","setCallback","renderPagination","$b5rV1","addCurrrentMoviesToLocalStorage","results","$7dbe43ef2045a1df$export$f2275db3dee9e567","async","response","$parcel$interopDefault","get","$7dbe43ef2045a1df$var$searchFilms","films","$krGWQ","containerBox","innerHTML","markup","map","film","_release_date","ref","date","release_date","first_air_date","slice","id","poster_path","original_name","original_title","toUpperCase","title","$7dbe43ef2045a1df$var$transformId","genre_ids","join","$7dbe43ef2045a1df$export$f48ccfcd8b08d9f9","filmCards","vote_average","toFixed","moviesContainer","insertAdjacentHTML","arr","g","localStorage","getItem","genres","JSON","parse","genreName","array","i","length","x","name","setItem","stringify","$7dbe43ef2045a1df$var$addGenresToLocalStorage"],"version":3,"file":"index.7c8ef0bc.js.map"}