{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,oDAOA,MAAMC,EAAO,CACTC,WAAYC,SAASC,cAAc,sBACnCC,QAASF,SAASC,cAAc,iBAChCE,gBAAiBH,SAASC,cAAc,8BACxCG,UAAWJ,SAASC,cAAc,sBAGhCI,EAAa,IAAI,EAAAC,EAAAC,SACjBC,EAAa,IAAI,EAAAC,EAAAF,SAiCvBG,eAAeC,EAAeC,GAAO,GAEjC,MAAMC,EAAYD,GAAc,EACJP,EAAjBS,cAAgBD,EAEE,UACnBR,EAAWU,mBAAmBC,MAAKC,IACvC,GAAyB,IAArBA,EAAKC,YACN,OAAOpB,EAAKM,UAAUe,UAAUC,OAAO,aAExCZ,EAAWa,eAAiBR,EACFL,EAAfc,cAAgBL,EAAKC,YACGV,EAAxBe,YAAcZ,EACKH,EAAnBgB,mBAEX1B,EAAKM,UAAUe,UAAUM,IAAI,cAE5B,EAAA7B,EAAA8B,gBAAeT,EAAKU,UACrB,EAAAC,EAAAC,iCAAiCZ,EAAKU,QAAQ,G,CAGpD,MAAOG,GACLC,QAAQC,IAAIF,E,CACf,SACE,EAAAG,EAAAC,gB,EA3CPpC,EAAKC,WAAWoC,iBAAiB,UAEjC,SAAkBC,GAKd,GAHAA,EAAMC,iBACNhC,EAAWiC,WAAaF,EAAMG,cAAcC,SAASC,MAAMC,MAAMC,OAEtC,KAAvB7C,EAAKI,QAAQwC,MACZ,OAAO5C,EAAKM,UAAUe,UAAUC,OAAO,aAI5CtB,EAAKM,UAAUe,UAAUM,IAAI,aAE7Bd,KACA,EAAAsB,EAAAW,gB","sources":["src/js/search-by-keyword.js"],"sourcesContent":["import {  renderFilmList} from \"./create-markup\";\n import { preloaderShow, preloaderShowLonger, hidePreloader } from './loader';\nimport { addCurrrentMoviesToLocalStorage } from \"./local-storage\";\nimport Pagination from './pagination.js';\nimport API from './api-service.js';\n\n\nconst refs = {\n    searchForm: document.querySelector('.header_input-wrap'),\n    inputEl: document.querySelector('.header_input'),\n    moviesContainer: document.querySelector('.main-container--card__box'),\n    errorText: document.querySelector('.header_error-msg'),\n};\n\nconst apiService = new API;\nconst pagination = new Pagination;\n\n///////винесено в api-service\n// let searchQuery = '';\n\n// const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n// const KEY = `2994e3a31c3cad99fd99bf3fe61d916f`;\n\n// async function fetchSearchMovie(searchQuery) {\n//     return await axios.get(`${BASE_URL}?api_key=${KEY}&language=en-US&query=${searchQuery}`)\n//         .then(response => response.data);\n// }\n///////////\n\nrefs.searchForm.addEventListener('submit', onSearch);\n\nfunction onSearch(event) {\n    \n    event.preventDefault();\n    apiService.inputQuery = event.currentTarget.elements.query.value.trim();\n\n    if (refs.inputEl.value === \"\") {\n         return refs.errorText.classList.remove('is-hidden');\n    }\n    \n    // console.log(searchQuery);\n    refs.errorText.classList.add('is-hidden');\n   \n    getSearchMovie();\n    preloaderShow();\n    // refs.inputEl.value = \"\";\n}\n\nasync function getSearchMovie(page = false) {\n    \n    const queryPage = page ? page : 1; // Проверка страниц, обязательно до fetch\n    apiService.setPageNumber = queryPage; // Передает текущую страницу в класс api\n\n    try {\n        await apiService.fetchSearchMovie().then(data => {\n          if (data.total_pages === 0) {\n             return refs.errorText.classList.remove('is-hidden');\n           };\n            pagination.setCurrentPage = queryPage; // Передает страницу в пагинатор\n            pagination.setTotalPages = data.total_pages; // Передает общее кол-во страниц в пагинатор\n            pagination.setCallback = getSearchMovie; // Передает ссылку на коллбэк функцию \n            pagination.renderPagination(); // Вызов пагинации\n            // clearMoviesContainer();\n            refs.errorText.classList.add('is-hidden');\n            \n             renderFilmList(data.results);\n            addCurrrentMoviesToLocalStorage (data.results) \n            // console.log(data.total_pages);\n        });      \n    } catch (error) {\n        console.log(error)\n    } finally {\n       hidePreloader();\n    }\n    \n}\n\n///////////// --функція перенесена в файл create-markup----///////\n// function renderMoviesCard(results) {\n//     const markup = results\n//         .map(el => {\n//             return `\n//             <li class=\"main-container--card\">\n//             <img src = \"https://image.tmdb.org/t/p/w500${el.poster_path}\"\n//             class = \"film-poster\"\n//             alt=\"${el.original_title}\" loading=\"lazy\"\n//              />\n//             <div class=\"film-info\">\n//             <h3 class=\"film-title\">${el.original_title.toUpperCase()}</h3>\n//             <p class=\"more-info\">${transformId(el.genre_ids)} | ${el.release_date.slice(0, 4)}</p>\n//             </div>\n//             </li> `\n//         })\n//         .join('');\n    \n//     refs.moviesContainer.insertAdjacentHTML('beforeend', markup);\n// };\n\n///////////// --функція перенесена в файл create-markup----///////\n// function transformId ([...arr]) {\n//     const g = localStorage.getItem(\"GENRES\");\n//     const genres = JSON.parse(g);\n//     let genreName;\n//     const array = [...arr]\n//     for (let i = 0; i < genres.length; i++) {\n//         for (let y = 0; y < array.length; y++) {\n//             if (array[y] === genres[i].id) {\n//                 genreName = genres[i].name;\n//                 array[y] = genreName\n//             };\n//         };\n//     };\n//     // console.log(array)\n//     if (array.length > 3) {\n//         return `${array[0]}, ${array[1]}, Other`\n//     } else if (array.length > 2) {\n//         return `${array[0]}, ${array[1]}, ${array[2]}`\n//     } else if (array.length > 1) {\n//         return `${array[0]}, ${array[1]}`\n//     }\n//     return `${array[0]}`\n// };\n\n\nfunction clearMoviesContainer() {\n    refs.moviesContainer.innerHTML = \"\";\n}\n\n"],"names":["$k0Ust","parcelRequire","$c808da8250b3ec39$var$refs","searchForm","document","querySelector","inputEl","moviesContainer","errorText","$c808da8250b3ec39$var$apiService","$7me8F","default","$c808da8250b3ec39$var$pagination","$2nhTy","async","$c808da8250b3ec39$var$getSearchMovie","page","queryPage","setPageNumber","fetchSearchMovie","then","data","total_pages","classList","remove","setCurrentPage","setTotalPages","setCallback","renderPagination","add","renderFilmList","results","$b5rV1","addCurrrentMoviesToLocalStorage","error","console","log","$gjiCh","hidePreloader","addEventListener","event","preventDefault","inputQuery","currentTarget","elements","query","value","trim","preloaderShow"],"version":3,"file":"index.4fa60ab3.js.map"}